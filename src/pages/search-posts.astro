---
import { CollectionEntry, getCollection } from "astro:content";
import Layout from "~/layouts/MainLayout.astro";
import Category from "~/components/Category.astro";
import siteInfo from "~/data/site-info";
import HistoryBackButton from "~/components/HistoryBackButton.astro";

import { getCategories } from "~/helpers/categories";
import Search from "~/components/Search.astro";
import StyledHr from "~/components/StyledHr.astro";
import PostPreview from "~/components/PostPreview.astro";

const posts = await getCollection("blog");
const categories = getCategories(posts);

const sortedPosts = posts.sort(
	(a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
		b.data.publishDate.getTime() - a.data.publishDate.getTime(),
);

const placeholderGradient = `var(--gradient-${
	Math.floor(Math.random() * 30) + 1
})`;
---

<Layout
	title={`The ${siteInfo.name} Blog`}
	description={`Get all the latest news from ${siteInfo.name}`}
	image={{ src: "/og/blog.jpg", alt: `The ${siteInfo.name} Blog` }}
>
	<div class="container">
		<div class="placeholder-gradient"></div>
		<header>
			<HistoryBackButton text="Back" />
			<h1>Search Posts</h1>
			<p>Select a category or search <br />for a keyword.</p>
		</header>
		<StyledHr rand />

		<ul>
			{
				categories.map((category) => (
					<li>
						<Category name={category} />
					</li>
				))
			}
		</ul>
		<Search
			id="catalogsearch"
			selector="#catalog li"
			placeholder={"Search posts"}
		/>

		<ul id="catalog">
			{
				sortedPosts.map((post) => (
					<li>
						<PostPreview post={post} />
					</li>
				))
			}
		</ul>
	</div>
</Layout>

<style define:vars={{ placeholderGradient }}>
	@import "open-props/src/props.media.css";
	@import "open-props/gradients";
	ul {
		max-inline-size: var(--size-content-3);
		margin-inline: auto;
		list-style: none;
		display: flex;
		justify-content: center;
		align-items: center;
		flex-wrap: wrap;
		gap: var(--size-4);
		padding-inline-start: 0;
		margin-block-start: 0;
		margin-block-end: 0;
		&:nth-of-type(2) {
			gap: var(--size-9);
		}
	}
	li {
		max-inline-size: initial;
	}
	header {
		background-color: var(--surface-1);
		padding: var(--size-6);
		margin-inline: auto;
		inline-size: 100%;
		text-align: center;
		max-inline-size: min(var(--size-content-3), 80vi);
		border-radius: var(--radius-2);
	}
	div.placeholder-gradient {
		position: relative;
		aspect-ratio: var(--ratio-widescreen);
		clip-path: circle(200% at center -200%);
		object-fit: cover;
		box-shadow: var(--shadow-2);
		z-index: -1;
		max-inline-size: 100vi;
		inset-inline-start: 50%;
		inset-inline-end: 50%;
		margin-left: -50vi;
		margin-right: -50vi;
		margin-block-end: calc(-1 * var(--size-12));
		@media (--sm-n-above) {
			margin-block-end: calc(-1 * var(--size-11));
			aspect-ratio: var(--ratio-ultrawide);
			clip-path: circle(200% at center -430%);
		}
		@media (--lg-n-above) {
			inline-size: 100%;
			max-inline-size: initial;
			inset-inline-start: initial;
			inset-inline-end: initial;
			margin-left: 0;
			margin-right: 0;
			margin-block-end: calc(-1 * var(--size-11));
		}
	}
	br {
		display: initial;
		@media (--md-n-above) {
			display: none;
		}
	}
	div.placeholder-gradient {
		background-image: var(--placeholderGradient);
		background-size: cover;
	}
	p {
		font-family: var(--font-mono);
		color: var(--text-2);
		opacity: 0.7;
	}
</style>
