<button
	class="theme-toggle"
	id="theme-toggle"
	title="Toggles light & dark"
	aria-label="auto"
	aria-live="polite"
>
	<svg aria-hidden="true" width="24" height="24" viewBox="0 0 24 24">
		<!-- https://feathericons.com/?query=sun -->
		<mask id="moon">
			<rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
			<circle cx="40" cy="8" r="11" fill="black"></circle>
		</mask>
		<circle id="sun" cx="12" cy="12" r="11" mask="url(#moon)"></circle>
		<g id="sun-beams">
			<line x1="12" y1="1" x2="12" y2="3"></line>
			<line x1="12" y1="21" x2="12" y2="23"></line>
			<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
			<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
			<line x1="1" y1="12" x2="3" y2="12"></line>
			<line x1="21" y1="12" x2="23" y2="12"></line>
			<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
			<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
		</g>
	</svg>
</button>

<style is:global>
	.theme-toggle {
		background: none;
		--nav-icon: var(--text-2);
		--nav-icon-hover: var(--brand);
	}

	#moon,
	#sun {
		fill: var(--nav-icon);
		stroke: none;

		@nest :hover > svg > & {
			fill: var(--nav-icon-hover);
		}
	}

	#sun {
		transition: transform 0.5s var(--ease-4);
		transform-origin: center center;
	}

	#sun-beams {
		--_opacity-dur: 0.15s;
		stroke: var(--nav-icon);
		stroke-width: 2px;
		transform-origin: center center;
		transition: transform 0.5s var(--ease-elastic-4),
			opacity var(--_opacity-dur) var(--ease-3);

		@nest :hover > svg > & {
			stroke: var(--nav-icon-hover);
		}
	}

	#moon > circle {
		transition: transform 0.5s var(--ease-out-3);
	}

	[data-theme="light"] {
		& #sun {
			transform: scale(0.5);
		}

		& #sun-beams {
			transform: rotateZ(0.25turn);
			--_opacity-dur: 0.5s;
		}
	}

	[data-theme="dark"] {
		& #moon > circle {
			transform: translateX(-20px);
		}

		& #sun-beams {
			opacity: 0;
		}
	}
</style>
<script>
	// theme toggle
	const getColorPreference = () => {
		if (localStorage.getItem("theme-preference"))
			return localStorage.getItem("theme-preference");
		else
			return window.matchMedia("(prefers-color-scheme: dark)").matches
				? "dark"
				: "light";
	};

	const setPreference = () => {
		localStorage.setItem("theme-preference", theme.value ?? "light");
		reflectPreference();
	};

	const reflectPreference = () => {
		document.firstElementChild?.setAttribute(
			"data-theme",
			theme.value ?? "light",
		);
		document
			.querySelector("#theme-toggle")
			?.setAttribute("aria-label", theme.value ?? "light");
	};

	const theme = {
		value: getColorPreference(),
	};

	// set early so no page flashes
	reflectPreference();

	window.onload = () => {
		// set on load so screen readers can see latest value on the button
		reflectPreference();

		document.querySelector("#theme-toggle")?.addEventListener("click", (e) => {
			theme.value = theme.value === "light" ? "dark" : "light";

			setPreference();
		});
	};

	window
		.matchMedia("(prefers-color-scheme: dark)")
		.addEventListener("change", ({ matches: isDark }) => {
			theme.value = isDark ? "dark" : "light";
			setPreference();
		});
</script>
